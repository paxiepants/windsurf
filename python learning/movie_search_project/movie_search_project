# project: movies input will be categorized based on imbd data api into sqlite database

# import required libraries
import sqlite3
from sqlite3 import Error
import requests


# create a database connection
def create_connection(db_file):
    conn = None;
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except Error as e:
        print(e)

# create a table
def create_table(conn):
    try:
        c = conn.cursor()
        c.execute(''' 
            CREATE TABLE IF NOT EXISTS movies (
            id integer PRIMARY KEY,
            title text NOT NULL,
            year integer NOT NULL,
            rating real NOT NULL
            )
        ''')
    except Error as e:
        print(e)
   
# imbd api for movie details
def search_movie(movie_name):
    url = "http://www.omdbapi.com/"
    params = {
        "apikey": "5e455587",
        "t": movie_name
    }
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if data.get('Response') == 'False':
            print(f"Error: {data.get('Error', 'Movie not found')}")
            return None
        return data
    except Exception as e:
        print(f"Error fetching movie data: {e}")
        return None

# insert a movie
def insert_movie(conn, movie):
    if not movie:
        return False
        
    try:
        title = movie.get('Title')
        year = movie.get('Year', '0')
        rating = movie.get('imdbRating', '0')
        
        # Basic validation
        if not title:
            print("Error: No title found in movie data")
            return False
            
        c = conn.cursor()
        c.execute(''' 
            INSERT INTO movies (title, year, rating)
            VALUES (?, ?, ?)
        ''', (title, int(year) if year and year != 'N/A' else 0, 
              float(rating) if rating and rating != 'N/A' else 0.0))
        conn.commit()
        print(f"Successfully added '{title}' ({year}) to the database!")
        return True
    except Error as e:
        print(f"Database error: {e}")
        return False
    except Exception as e:
        print(f"Error processing movie data: {e}")
        return False

# create a function to display all movies
def display_movies(conn):
    try:
        c = conn.cursor()
        c.execute("SELECT * FROM movies")
        rows = c.fetchall()
        if not rows:
            print("No movies found in the database")
            return
        
        for row in rows:
            print(f"Title: {row[1]}, Year: {row[2]}, Rating: {row[3]}")
    except Error as e:
        print(f"Database error: {e}")

# define main menu
def main_menu():
    # Create database connection
    import os
    # Path to the database in the same directory as the script
    db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "movies.db")
    conn = create_connection(db_path)
    if not conn:
        print("Error: Could not connect to the database")
        return
        
    create_table(conn)
    
    while True:
        print("\nMenu:")
        print("1. Search for a movie")
        print("2. Display all movies")
        print("3. Quit")
        
        choice = input("Enter your choice: ").strip()
        
        if choice == '1':
            movie_name = input("\nEnter movie name: ").strip()
            if not movie_name:
                print("Please enter a valid movie name")
                continue
                
            movie = search_movie(movie_name)
            if movie:
                insert_movie(conn, movie)
        elif choice == '2':
            display_movies(conn)
        elif choice == '3':
            print("\nGoodbye!")
            break
        else:
            print("Invalid choice. Please try again.")
    
    conn.close()

# run the main menu
if __name__ == '__main__':
    main_menu()