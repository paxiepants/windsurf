# project: movies input will be categorized based on imbd data api into sqlite database

# import required libraries
import logging
from pathlib import Path
import sqlite3
from sqlite3 import Error
from dataclasses import dataclass
from typing import Optional

import requests

logger = logging.getLogger(__name__)


@dataclass
class MovieRecord:
    title: str
    year: Optional[int]
    rating: Optional[float]


# create a database connection
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        conn.row_factory = sqlite3.Row
        return conn
    except Error as e:
        logger.error("Database connection error: %s", e)
        return None


# create a table
def create_table(conn):
    try:
        c = conn.cursor()
        c.execute(''' 
            CREATE TABLE IF NOT EXISTS movies (
            id integer PRIMARY KEY,
            title text NOT NULL,
            year integer NOT NULL,
            rating real NOT NULL
            )
        ''')
    except Error as e:
        logger.error("Database error while creating table: %s", e)
   
# omdb api for movie details
def search_movie(movie_name):
    url = "http://www.omdbapi.com/"
    params = {
        "apikey": "5e455587",
        "t": movie_name
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if data.get('Response') == 'False':
            logger.error("OMDb error: %s", data.get('Error', 'Movie not found'))
            return None
        return data
    except requests.exceptions.RequestException as e:
        logger.error("HTTP error fetching movie data: %s", e)
        return None
    except ValueError as e:
        logger.error("Invalid JSON response: %s", e)
        return None


def parse_movie(data):
    if not data:
        raise ValueError("No data to parse")

    title = data.get('Title')
    if not title:
        raise ValueError("No title found in movie data")

    year = data.get('Year')
    if year and year != 'N/A':
        year_fragment = year.replace('\u2013', '-').split('-', 1)[0].strip()
        try:
            year_value = int(year_fragment)
        except ValueError:
            year_value = None
    else:
        year_value = None

    rating = data.get('imdbRating')
    if rating and rating != 'N/A':
        try:
            rating_value = float(rating)
        except ValueError:
            rating_value = None
    else:
        rating_value = None

    return MovieRecord(title=title, year=year_value, rating=rating_value)


# insert a movie
def insert_movie(conn, movie):
    if not movie:
        return False

    try:
        record = parse_movie(movie)

        c = conn.cursor()
        c.execute(''' 
            INSERT INTO movies (title, year, rating)
            VALUES (?, ?, ?)
        ''', (record.title, record.year if record.year is not None else 0,
              record.rating if record.rating is not None else 0.0))
        conn.commit()
        print(f"Successfully added '{record.title}' ({record.year or 'unknown year'}) to the database!")
        return True
    except Error as e:
        logger.error("Database error: %s", e)
        return False
    except Exception as e:
        logger.error("Error processing movie data: %s", e)
        return False

# create a function to display all movies
def display_movies(conn):
    try:
        c = conn.cursor()
        c.execute("SELECT * FROM movies")
        rows = c.fetchall()
        if not rows:
            print("No movies found in the database")
            return

        for _, title, year, rating in rows:
            print(f"Title: {title}, Year: {year}, Rating: {rating}")
    except Error as e:
        logger.error("Database error: %s", e)

# define main menu
def main_menu():
    logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
    # Path to the database in the same directory as the script
    db_path = Path(__file__).with_name("movies.db")
    conn = create_connection(db_path)
    if not conn:
        logger.error("Error: Could not connect to the database")
        return

    with conn:
        create_table(conn)

        while True:
            print("\nMenu:")
            print("1. Add a movie")
            print("2. Display all movies")
            print("3. Quit")

            choice = input("Enter your choice: ").strip()

            if choice == '1':
                movie_name = input("\nEnter movie name: ").strip()
                if not movie_name:
                    print("Please enter a valid movie name")
                    continue

                movie = search_movie(movie_name)
                if movie:
                    insert_movie(conn, movie)
            elif choice == '2':
                display_movies(conn)
            elif choice == '3':
                print("\nGoodbye!")
                break
            else:
                print("Invalid choice. Please try again.")

# run the main menu
if __name__ == '__main__':
    main_menu()
